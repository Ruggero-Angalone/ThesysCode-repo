#!/bin/bash
#Launch with "nohup bash MultipleEnergyLaunch.sh 2>&1 &"
EventNumber=500
AnaCheck=false
#Energy in GeV
EnergyValues=(0.1 0.3 1.5)#100MeV, 300MeV, 1500MeV                                                #CHANGEME!
UserName=MyUserName                                                                               #CHANGEME!
FclPath="fcl/"
OutPath="${UserName}/Output/"                                                                     #CHANGEME!
OutTxtPath="${UserName}/larsoft_mydev/MyCode/Output/"                                             #CHANGEME!
#OutName and FclFilesName must both be ordered
OutName=("OutGen" "OutG4" "OutDetsim" "OutReco" "OutAna")                                         #CHANGEME!
Me="${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}"
FilePrototype="${FclPath}GEN_prototype.fcl"
PnfsPath="pnfs/${UserName}/Output/"                                                               #CHANGEME!
TextLineOriginal="#All values writtten as @<name>@ are made to be changed with a sed command"     #CHANGEME!
TextLineSubstitute="#Generated by $Me from $FilePrototype"                                        #CHANGEME!

echo -e "++++++++++++++++++++++++++++++++++++ \n \n \n "

for E in "${EnergyValues[@]}"; do
  #MeV energy conversion
  EPrint=$(echo "$E*1000" | bc)
  EPrint=${EPrint%".0"}
  EPrint=${EPrint%".00"}

  #echo -e "************************* \n EPrint=$EPrint \n ***************************** \n"
  GenName="Final_Gen_NEvents${EventNumber}_Energy${EPrint}.fcl"
  sed "s|@NEvents@|$EventNumber|g;s|@Energy@|$E|g;s|$TextLineOriginal|$TextLineSubstitute|g;" $FilePrototype > "fcl/${GenName}"
  #sed "s|@NEvents@|$EventNumber|g;s|@Energy@|$E|g;s|$TextLineOriginal|$TextLineSubstitute|g;" ../MyCode/fcl/gen_prototype.fcl > ../MyCode/fcl/GEN_real.fcl
  #cat ../MyCode/fcl/GEN_real.fcl
  #echo -e "\n\n\n --------------------------------------------------------------------------- \n\n\n"

  FclFilesName=( "${GenName}" "G4_.fcl" "DETSIM_.fcl" "RECO_.fcl" "ANA_.fcl")                     #CHANGEME!

  CommandOutput="Output/LastRun.txt"
  rm $CommandOutput

  if [ ${#OutName[@]} -ne ${#FclFilesName[@]} ];then
       echo "OutName must be in a 1 to 1 correspondence with FclFilesName"
       exit 1
  fi

  LaunchType=0
  if [ $LaunchType -eq "0" ]; then
      #this defines a temp variable with value of the lenght of the array minus 1 (starts from 0)
      temp=$((${#FclFilesName[@]}-1))
      #This allows i to be 1,...,array_lenght-1
      for i in "${!FclFilesName[@]}"; do
          FclLaunch="${FclPath}${FclFilesName[$i]}"
          OutRoot="${OutPath}${OutName[$i]}.root"
          OutTxt="${OutPath}${OutName[$i]}.txt"
          OutDump="${OutPath}${OutName[$i]}Dump.txt"
          #gen
          if [ $i -eq 0 ];then
            lar -c $FclLaunch -n $EventNumber -o $OutRoot -T /dev/null > $OutTxt 2>&1
            #lar -c eventdump.fcl $OutRoot > $OutDump
            echo "lar -c $FclLaunch -n $EventNumber -o $OutRoot -T /dev/null > $OutTxt 2>&1" >> $CommandOutput
            # echo "lar -c eventdump.fcl $OutRoot > $OutDump " >> $CommandOutput
          #ana
          elif [ $i -eq $temp ]; then
            InputRoot="${OutPath}${OutName[i-1]}.root"
            lar -c $FclLaunch -n $EventNumber -o /dev/null -T $OutRoot $InputRoot > $OutTxt 2>&1
            #lar -c eventdump.fcl $OutRoot > $OutDump
            echo "lar -c $FclLaunch -n $EventNumber -o /dev/null -T $OutRoot $InputRoot > $OutTxt 2>&1" >> $CommandOutput
            # echo "lar -c eventdump.fcl $OutRoot > $OutDump " >> $CommandOutput
          #others
          else
            InputRoot="${OutPath}${OutName[i-1]}.root"
            lar -c $FclLaunch -n $EventNumber -o $OutRoot -T /dev/null $InputRoot > $OutTxt 2>&1
            #lar -c eventdump.fcl $OutRoot > $OutDump
            echo "lar -c $FclLaunch -n $EventNumber -o $OutRoot -T /dev/null $InputRoot > $OutTxt 2>&1" >> $CommandOutput
            #  echo "lar -c eventdump.fcl $OutRoot > $OutDump " >> $CommandOutput
          fi
      done
  fi
  DirName="Final_NEvents${EventNumber}_Energy${EPrint}/"
  DirData="${OutPath}${DirName}"
  DirTxt="${OutTxtPath}${DirName}"
  PnfsDir="${PnfsPath}${DirName}"
  #Check if path exist, if not they are created
  if [ ! -d "$DirTxt" ]; then
    mkdir -p $DirTxt
  fi
  if [ ! -d "$DirData" ]; then
    mkdir -p $DirData
  fi
  if [ ! -d "$PnfsDir" ]; then
    mkdir -p $PnfsDir
  fi
  #Copy all .txt to app/users/.../Output them moves them to pnfs
  var="${OutPath}*.txt"
  cp $CommandOutput $DirTxt
  cp $var $DirTxt
  mv $var $DirData
  #Moves all .root to pnfs
  var="${OutPath}*.root"
  mv $var $PnfsDir
done
